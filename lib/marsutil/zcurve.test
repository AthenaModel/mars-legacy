# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    zcurve.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for util(n) zcurve(n)
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}
 
#-----------------------------------------------------------------------
# Load the package to be tested

package require util 1.0

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::util::test {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Import the code to be tested
    namespace import ::util::*

    #-------------------------------------------------------------------
    # Setup

    # A z-curve that slopes up from left to right (doubles)
    set z1 {0.0 -50.0 50.0 100.0}

    # A Z-curve that slopes down from left to right (doubles)
    set z2 {100.0 -50.0 50.0 0.0}

    # A Z-curve where a and b are close (doubles)
    set z3 {0.0 -0.01 0.01 100.0}

    # A z-curve that slopes up from left to right (integers)
    set z4 {0 -50 50 100}

    # A Z-curve that slopes down from left to right (integers)
    set z5 {100 -50 50 0}

    # A Z-curve where a and b are close (hi, lo integers)
    set z6 {0 -0.01 0.01 100}

    #-------------------------------------------------------------------
    # zcurve

    test zcurve-1.1 {z1, x < a} -body {
        zcurve eval $z1 -75.0
    } -result {0.0}

    test zcurve-1.2 {z1, x == a} -body {
        zcurve eval $z1 -50.0
    } -result {0.0}

    test zcurve-1.3 {z1, x > b} -body {
        zcurve eval $z1 75.0
    } -result {100.0}

    test zcurve-1.4 {z1, x == b} -body {
        zcurve eval $z1 50.0
    } -result {100.0}

    test zcurve-1.5 {z1, a < x < b} -body {
        format "%.1f" [zcurve eval $z1 0.0]
    } -result {50.0}

    test zcurve-2.1 {z2, x < a} -body {
        zcurve eval $z2 -75.0
    } -result {100.0}

    test zcurve-2.2 {z2, x == a} -body {
        zcurve eval $z2 -50.0
    } -result {100.0}

    test zcurve-2.3 {z2, x > b} -body {
        zcurve eval $z2 75.0
    } -result {0.0}

    test zcurve-2.4 {z2, x == b} -body {
        zcurve eval $z2 50.0
    } -result {0.0}

    test zcurve-2.5 {z2, a < x < b} -body {
        format "%.1f" [zcurve eval $z2 0.0]
    } -result {50.0}

    test zcurve-3.1 {z3, x < a} -body {
        zcurve eval $z3 -75.0
    } -result {0.0}

    test zcurve-3.2 {z3, x == a} -body {
        zcurve eval $z3 -0.01
    } -result {50.0}

    test zcurve-3.3 {z3, x > b} -body {
        zcurve eval $z3 75.0
    } -result {100.0}

    test zcurve-3.4 {z3, x == b} -body {
        zcurve eval $z3 0.01
    } -result {50.0}

    test zcurve-3.5 {z3, a < x < b} -body {
        format "%.1f" [zcurve eval $z3 0.0]
    } -result {50.0}

    # Repeat the same tests using integers
    test zcurve-4.1 {z4, x < a} -body {
        zcurve eval $z4 -75.0
    } -result {0.0}

    test zcurve-4.2 {z4, x == a} -body {
        zcurve eval $z4 -50.0
    } -result {0.0}

    test zcurve-4.3 {z4, x > b} -body {
        zcurve eval $z4 75.0
    } -result {100.0}

    test zcurve-4.4 {z4, x == b} -body {
        zcurve eval $z4 50.0
    } -result {100.0}

    test zcurve-4.5 {z4, a < x < b} -body {
        format "%.1f" [zcurve eval $z4 0.0]
    } -result {50.0}

    test zcurve-5.1 {z5, x < a} -body {
        zcurve eval $z5 -75.0
    } -result {100.0}

    test zcurve-5.2 {z5, x == a} -body {
        zcurve eval $z5 -50.0
    } -result {100.0}

    test zcurve-5.3 {z5, x > b} -body {
        zcurve eval $z5 75.0
    } -result {0.0}

    test zcurve-5.4 {z5, x == b} -body {
        zcurve eval $z5 50.0
    } -result {0.0}

    test zcurve-5.5 {z5, a < x < b} -body {
        format "%.1f" [zcurve eval $z5 0.0]
    } -result {50.0}

    test zcurve-6.1 {z6, x < a} -body {
        zcurve eval $z6 -75.0
    } -result {0.0}

    test zcurve-6.2 {z6, x == a} -body {
        zcurve eval $z6 -0.01
    } -result {50.0}

    test zcurve-6.3 {z6, x > b} -body {
        zcurve eval $z6 75.0
    } -result {100.0}

    test zcurve-6.4 {z6, x == b} -body {
        zcurve eval $z6 0.01
    } -result {50.0}

    test zcurve-6.5 {z6, a < x < b} -body {
        format "%.1f" [zcurve eval $z6 0.0]
    } -result {50.0}

    test zcurve-7.1 {empty zcurve} -body {
        zcurve validate {}
    } -returnCodes {
        error
    } -result {invalid zcurve, should be {lo a b hi}: ""}

    test zcurve-7.3 {three element zcurve} -body {
        zcurve validate {a b c}
    } -returnCodes {
        error
    } -result {invalid zcurve, should be {lo a b hi}: "a b c"}

    test zcurve-7.3 {five element zcurve} -body {
        zcurve validate {a b c d e}
    } -returnCodes {
        error
    } -result {invalid zcurve, should be {lo a b hi}: "a b c d e"}

    test zcurve-7.4 {lo is not a number} -body {
        zcurve validate {a b c d}
    } -returnCodes {
        error
    } -result {invalid zcurve, lo is not a number: "a"}

    test zcurve-7.5 {a is not a number} -body {
        zcurve validate {1.0 b c d}
    } -returnCodes {
        error
    } -result {invalid zcurve, a is not a number: "b"}

    test zcurve-7.6 {b is not a number} -body {
        zcurve validate {1.0 -50.0 c d}
    } -returnCodes {
        error
    } -result {invalid zcurve, b is not a number: "c"}

    test zcurve-7.7 {hi is not a number} -body {
        zcurve validate {1.0 -50.0 50.0 d}
    } -returnCodes {
        error
    } -result {invalid zcurve, hi is not a number: "d"}

    test zcurve-7.8 {a > b} -body {
        zcurve validate {1.0 50.0 -50.0 100.0}
    } -returnCodes {
        error
    } -result {invalid zcurve, (a=50.0) > (b=-50.0)}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::util::test




