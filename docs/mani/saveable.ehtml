<<manpage {saveable(i)} "Saveable Module Interface">>

<<section SYNOPSIS>>

<<itemlist>>

<<section DESCRIPTION>>

A saveable(i) object is one whose state can be saved and restored.<p>

<<section SUBCOMMANDS>>

Every saveable(i) is represented as a command or command prefix with
at least the following subcommands.  Note that it is common
practice for an object to group them under a "<code>saveable</code>"
subcommand.<p>

<<deflist subcommands>>

<<defitem checkpoint {<i>saveable</i> checkpoint}>>

This subcommand returns the <i>saveable</i>'s state as a single
string, which can be saved in any desired manner and later can be
<<iref restore>>ed.  Note that the returned value need not be the
the object's entire state; this is not a serialization interface.<p>

<<defitem restore {<i>saveable</i> restore <i>checkpoint</i>}>>

Restores the <i>saveable</i>'s state to the saved <i>checkpoint</i>,
which was originally returned by <<iref checkpoint>>.<p>

<<defitem changed {<i>saveable</i> changed}>>

Returns 1 if the <i>saveable</i> has data that must be saved, and 0
otherwise.  This is intended to be used by code that checks whether
the application's state has changed, e.g., before exiting the program.
It's expected that the application will call <<iref checkpoint>> for
all saveables every time it saves its state.<p>

<</deflist subcommands>>

<<section EXAMPLES>>

Here's an example of a minimal saveable(i) that saves its checkpointed
data in a single array.  The saveable(i) is a singleton module that
implements the interface as subcommands of the singleton.<p>

<pre>
snit::type sample {
    ...

    typevariable info -array { ... }

    typemethod checkpoint {} {
        array get info
    }

    typemethod restore {checkpoint} {
        array unset info
        array set info $checkpoint
    }

    typemethod changed {} {
        # Depends on how info() is used.
    }
    ...
}
</pre>

<<section AUTHOR>>

Will Duquette<p>

<<section HISTORY>>

Original interface.

<</manpage>>




